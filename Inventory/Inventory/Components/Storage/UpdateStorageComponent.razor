@using Entities
@using Business
@inject NavigationManager NavManager

    <EditForm Model="oStorage">
        <div class="form-group">
            <label>Bodega:</label>
            <InputText class="form-control" @bind-Value="oStorage.storageId" />
        </div>
        <div class="form-group">
            <label>Cantidad Parcial:</label>
            <InputNumber class="form-control" @bind-Value="oStorage.partialQuantity" />
        </div>
        <div class="form-group">
            <label>Producto:</label>
            <InputSelect @bind-Value="oStorage.productId" class="form-control">
                @foreach (var product in products)
                {
                    <option value="@product.productId">@product.productName</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Almacen:</label>
            <InputSelect @bind-Value="oStorage.warehouseId" class="form-control">
                @foreach (var warehouse in warehouses)
                {
                    <option value="@warehouse.warehouseId">@warehouse.warehouseName</option>
                }
            </InputSelect>
        </div>

        <input type="button" value="Actualizar Almacenaje" @onclick="Updatestorage" />

    </EditForm>

@code {
    [Parameter]
    public string IdStorage { get; set; }

    StorageEntity oStorage = new StorageEntity();
    List<ProductEntity> products = new List<ProductEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();

    protected override async Task OnInitializedAsync()
    {
        products = B_Product.ProductList();
        warehouses = B_Warehouse.WarehouseList();
        //oStorage = B_Storage.StorageByList(IdStorage);
    }

    public void Updatestorage()
    {
        B_Storage.UpdateStorage(oStorage);
        NavManager.NavigateTo("storage/list");
    }

}
