@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangeWarehouse">
        <option value="">Seleccione una bodega ...</option>
        @foreach(var warehouse in warehouses) 
        {
            <option value="@warehouse.warehouseId">@warehouse.warehouseName</option>
        }
    </select>
</div>
<hr/>

<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.storageId">
            <option value="">Seleccione un producto ...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.storageId">@storage.Product.productName</option>
            }
        </InputSelect>
    </div>
    <label>Digite la cantidad</label>
    <div class="form-group">
        <InputNumber class="form-control" @bind-Value="oInOut.Quality" />
    </div>
    <label>Es una entrada?</label>
    <div class="form-group">
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>

    <input type="button" value="@buttonValue" @onclick="SaveInOut"/>
</EditForm>
    
    <div class="text-center h4">
        @message
    </div>

@code {
    InOutEntity oInOut = new InOutEntity();

    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message;

    string buttonValue => oInOut.IsInput ? "Resgistrar Entrada" : "Registrar Salida";

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangeWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageListByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.storageId == oInOut.storageId);
        oProduct = oStorage.Product;
        if (oInOut.IsInput)
        {
            oStorage.partialQuantity = oStorage.partialQuantity + oInOut.Quality;
            B_Storage.UpdateStorage(oStorage);

            oProduct.totalQuantity = oProduct.totalQuantity + oInOut.Quality;
            B_Product.UpdateProduct(oProduct);

            message = $"El producto {oProduct.productName} ha sido actualizado exitosamente";

        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quality, oStorage.partialQuantity))
            {

                oStorage.partialQuantity = oStorage.partialQuantity - oInOut.Quality;
                B_Storage.UpdateStorage(oStorage);

                oProduct.totalQuantity = oProduct.totalQuantity - oInOut.Quality;
                B_Product.UpdateProduct(oProduct);

                message = $"El producto {oProduct.productName} ha sido actualizado exitosamente";
            }
            else
            {
                message = $"No existe la cantidad suficiente para el producto {oProduct.productName}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }

}
